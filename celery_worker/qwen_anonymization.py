#TODO: Add text preprocessing after mappings for case normalization

#TODO: Попробовать промпты Алекся для создания карты + саммари

#TODO: Go through multiple rounds of prompts to create the mappings. Round 1: prompt with existing mappings and update it if new entities have been identified, Round 2: anonymize text algorithmically, Round 3: depending on the end result - create another mapping or compare the already existing mapping to what the llm has produced
import os
import requests
from tokenCounter import count_tokens
import re
from pydantic import BaseModel
import json
import whisper, torch

OLLAMA_URL = os.getenv("OLLAMA_HOST", "http://localhost:11434")

def remove_tagged_text(text:str, tag:str) -> str:
    """
    Remove parts of text enclosed in a specific tag.
    """
    pattern = re.compile(r"<" + tag + r">.*?</" + tag + r">", re.DOTALL)
    return re.sub(pattern, "", text)

def get_anonymization_mapping(text: str, model_name: str) -> dict[str, str] | str:
    """
    Generates anonymization mapping from the provided text using LLM.
    Returns a dict with mappings or an error string.
    """
    prompt = f"""ЗАДАЧА: Анализ текста и выявление чувствительных данных с созданием карты замен

ИНСТРУКЦИИ:
Проанализируй предоставленный текст и выяви ВСЕ именованные сущности и чувствительную информацию, которая может содержать:
- Персональные данные (ПДн)
- Корпоративную конфиденциальную информацию
- Коммерческую тайну
- Технические данные

КАТЕГОРИИ ДЛЯ ВЫЯВЛЕНИЯ:

1. ПЕРСОНАЛЬНЫЕ ДАННЫЕ:
   - Имена и фамилии людей
   - Отчества и полные ФИО
   - Должности и звания
   - Email адреса
   - Номера телефонов (мобильные и городские)
   - Адреса (почтовые, домашние, рабочие)
   - Паспортные данные, ИНН, СНИЛС
   - Даты рождения
   - Банковские реквизиты
   - IP-адреса и MAC-адреса

2. ГЕОГРАФИЧЕСКИЕ ДАННЫЕ:
   - Названия городов и населенных пунктов
   - Названия стран и регионов
   - Названия улиц, районов
   - Почтовые индексы
   - Координаты GPS

3. КОРПОРАТИВНАЯ ИНФОРМАЦИЯ:
   - Названия компаний и организаций
   - Названия департаментов и подразделений
   - Виды деятельности и тип компании ( например, нефтедобыча, Нефтедобывающая Компания, создание ПО, Интегратор ИТ, поставка серверов,и тп)
   - Номера договоров и соглашений
   - Коды проектов
   - Внутренние системы и сервисы
   - Корпоративные домены и URL
   - Логины и пароли
   - API ключи и токены

4. ТЕХНИЧЕСКАЯ ИНФОРМАЦИЯ:
   - Марки и модели оборудования
   - Серийные номера
   - Версии программного обеспечения
   - Названия серверов и баз данных
   - Сетевые настройки и конфигурации
   - Технические характеристики

5. ФИНАНСОВАЯ ИНФОРМАЦИЯ:
   - Суммы сделок и контрактов
   - Бюджеты проектов
   - Зарплаты и компенсации
   - Номера счетов и карт
   - Финансовые показатели

6. ВРЕМЕННЫЕ ДАННЫЕ:
   - Конкретные даты событий
   - Временные периоды проектов
   - Дедлайны и сроки

ФОРМАТ ОТВЕТА:

Представь результат в следующем формате:

## КАРТА ЗАМЕН ЧУВСТВИТЕЛЬНЫХ ДАННЫХ

### ПЕРСОНАЛЬНЫЕ ДАННЫЕ
| Исходное значение | Категория | Замена | Обоснование |
|-------------------|-----------|--------|-------------|
| [найденная сущность] | [тип данных] | [анонимизированная замена] | [почему это чувствительно] |

### КОРПОРАТИВНАЯ ИНФОРМАЦИЯ
| Исходное значение | Категория | Замена | Обоснование |
|-------------------|-----------|--------|-------------|

### ТЕХНИЧЕСКАЯ ИНФОРМАЦИЯ
| Исходное значение | Категория | Замена | Обоснование |
|-------------------|-----------|--------|-------------|

### ГЕОГРАФИЧЕСКИЕ ДАННЫЕ
| Исходное значение | Категория | Замена | Обоснование |
|-------------------|-----------|--------|-------------|

### ФИНАНСОВАЯ ИНФОРМАЦИЯ
| Исходное значение | Категория | Замена | Обоснование |
|-------------------|-----------|--------|-------------|



ОСОБЫЕ ТРЕБОВАНИЯ:
- В ананимизированной замене не должно быть никакой информации о виде деятельности, типе компании, другая информация, по которой можно восстановить чувствительную информацию( например: Недопустимо- Нефтегазовая_Компания_1, Допустимо: Добывающая_Компания_1)
- Выяви скрытые паттерны (например, номера телефонов без явного указания)
- Определи косвенные идентификаторы
- Учти контекстуальную чувствительность
- Предложи градацию анонимизации (частичная/полная)

Текст встречи:

{text}
"""


    payload = {
        "model": model_name,
        "prompt": prompt,
        "stream": False,
        "options": {
            "temperature": 0,
            "top_p": 0.9,
            "repeat_penalty": 1.1,
            "num_predict": 2500,
            "num_ctx": min(count_tokens(prompt) + 2048, 32768),
        },
        "think": False
    }

    try:
        print("\n\n=====STARTING MAPPING GENERATION======\n")
        response = requests.post(f"{OLLAMA_URL}/api/generate", json=payload)
        response.raise_for_status()

        response_text = response.json().get("response", "").strip()

        if not response_text:
            return "[ERROR]: Empty response from model."
        
        print("\n======MAPPING GENERATION RESPONSE======\n")
        print(response_text)
        print("\n\n\n")

        print("MAPPING SAVING IN PROGRESS....\n")
        safe_model = re.sub(r'[^\w.-]+', '_', model_name)
        filename = f"tests/anonymizer_tests/qwen/{safe_model}_mappings.txt"
        with open(filename, "w+", encoding="utf-8", newline="") as file:
         file.write(f"МОДЕЛЬ: {model_name}\n\n")
         file.write("ОТВЕТ:\n")
         file.write(response_text)
         file.write("\n")


        print("\n!DONE SAVING MAPPINGS!\n")
        return response_text
    except Exception as e:
        return f"[ERROR]: {e}"

def anonymize_transcript(text: str, mappings: str, model_name: str = "qwen3:30b"):
    prompt = f"""ЗАДАЧА: Замена чувствительных данных и очистка транскрипта записи встречи

ВХОДНЫЕ ДАННЫЕ:
1. Исходный транскрипт встречи
2. Карта замен чувствительной информации

ИНСТРУКЦИИ ПО АНОНИМИЗАЦИИ:

1. ПРИМЕНЕНИЕ КАРТЫ ЗАМЕН:
   - Точно следуй предоставленной карте замен
   - Замени ВСЕ упоминания чувствительных данных и сущностей на указанные значения по карте замен
   - Обеспечь консистентность: одна сущность = одна замена во всем тексте
   - Сохрани контекст и смысл высказываний
   - При неоднозначности используй наиболее безопасный вариант замены

2. ОБРАБОТКА УЧАСТНИКОВ:
   - Замени имена участников на роли: УЧАСТНИК_1, УЧАСТНИК_2, и так далее
   - Сохрани структуру диалога с указанием ролей
   - Если роль неизвестна, используй УЧАСТНИК_[номер]

ИНСТРУКЦИИ ПО ОЧИСТКЕ ТРАНСКРИПТА:

3. УДАЛЕНИЕ ШУМОВОЙ ИНФОРМАЦИИ:
   - Убери междометья: "хм", "ээ", "ааа", "угу", "да-да", "вот"
   - Удали повторы слов: "это это это важно" → "это важно"
   - Убери слова-паразиты: "типа", "короче", "в общем-то", "как бы"
   - Удали незавершенные фразы и обрывки мыслей
   - Убери технические комментарии о связи: "меня слышно?", "звук пропал"

4. ИСПРАВЛЕНИЕ ОШИБОК ТРАНСКРИБАЦИИ:
   - Исправь очевидные ошибки распознавания речи по контексту
   - Восстанови сокращения до полных слов где необходимо
   - Исправь неправильно расставленные знаки препинания
   - Устрани логические несоответствия в тексте

5. СОКРАЩЕНИЕ МНОГОСЛОВНОСТИ:
   - Сократи избыточные формулировки до сути
   - "Я хотел бы сказать, что возможно нам стоит рассмотреть" → "Предлагаю рассмотреть"
   - "В принципе, наверное, можно было бы попробовать" → "Можно попробовать"
   - Убери лишние вводные конструкции
   - Сохрани ключевые решения и выводы

6. СТРУКТУРИРОВАНИЕ ТЕКСТА:
   - Разбей на логические блоки по темам
   - Добавь временные метки для ключевых моментов
   - Выдели принятые решения и действия
   - Сохрани важные вопросы и ответы

ФОРМАТ ВЫВОДА:

## АНОНИМИЗИРОВАННЫЙ И ОЧИЩЕННЫЙ ТРАНСКРИПТ

### УЧАСТНИКИ ВСТРЕЧИ:
- УЧАСТНИК_А: [роль/должность в анонимизированном виде]
- УЧАСТНИК_Б: [роль/должность в анонимизированном виде]
- МОДЕРАТОР: [роль/должность в анонимизированном виде]

### ОСНОВНОЕ СОДЕРЖАНИЕ:

**[ЧЧ:ММ] Тема/блок обсуждения**

УЧАСТНИК_А: [очищенная и анонимизированная речь]

УЧАСТНИК_Б: [очищенная и анонимизированная речь]

### КЛЮЧЕВЫЕ РЕШЕНИЯ:
1. [Решение 1 в анонимизированном виде]
2. [Решение 2 в анонимизированном виде]

### ДЕЙСТВИЯ И ОТВЕТСТВЕННЫЕ:
| Действие | Ответственный | Срок |
|----------|---------------|------|
| [анонимизированное действие] | [анонимизированная роль] | [период] |

### ОТКРЫТЫЕ ВОПРОСЫ:
1. [Вопрос 1 в анонимизированном виде]
2. [Вопрос 2 в анонимизированном виде]

## СТАТИСТИКА ОБРАБОТКИ:
- Исходная длина: [количество слов/символов]
- Финальная длина: [количество слов/символов]
- Степень сжатия: [процент]
- Количество замен: [число]
- Удаленных шумовых элементов: [число]

ПРИНЦИПЫ ОБРАБОТКИ:

1. СОХРАНЕНИЕ СМЫСЛА:
   - Не искажай фактическую информацию
   - Сохрани логику обсуждения
   - Поддержи причинно-следственные связи
   - Оставь ключевые аргументы

2. БЕЗОПАСНОСТЬ ДАННЫХ:
   - Приоритет безопасности над детализацией
   - При сомнениях выбирай более анонимную замену
   - Не допускай возможности обратной идентификации
   - Проверь отсутствие косвенных идентификаторов

3. ЧИТАЕМОСТЬ РЕЗУЛЬТАТА:
   - Обеспечь связность текста
   - Сохрани естественность речи
   - Поддержи профессиональный тон
   - Убедись в понятности контекста

СПЕЦИАЛЬНЫЕ ТРЕБОВАНИЯ:

4. ОБРАБОТКА ТЕХНИЧЕСКИХ ТЕРМИНОВ:
   - Сохрани профессиональную терминологию
   - Анонимизируй только специфичные названия
   - Оставь общепринятые стандарты и методологии

5. ВРЕМЕННЫЕ ДАННЫЕ:
   - Замени конкретные даты на периоды: "15 марта" → "в середине месяца"
   - Сохрани относительные временные указания
   - Обобщи сроки проектов

ВХОДНЫЕ ДАННЫЕ ДЛЯ ОБРАБОТКИ:

КАРТА ЗАМЕН:
{mappings}


ИСХОДНЫЙ ТРАНСКРИПТ:
{text}
```

## Дополнительные правила обработки:

### Типовые шаблоны очистки:

**Убрать:**
- "Так, ээээ, значит..."
- "Ну как бы это сказать..."
- "В общем и целом получается что..."
- "Если я правильно понимаю..."
- "Давайте все-таки попробуем..."

**Заменить на:**
- Прямые формулировки
- Четкие утверждения
- Конкретные предложения

### Примеры обработки:

**До:**
"Иванов П.С.: Ээээ, ну вот, в общем-то, я хотел бы сказать, что наверное нам стоило бы рассмотреть возможность, хм, закупки серверов Dell R740 для нашего офиса в Москве..."

**После:**
"УЧАСТНИК_А: Предлагаю рассмотреть закупку ОБОРУДОВАНИЕ_1 МОДЕЛЬ_X для офиса в ГОРОДЕ_1."
"""
    
    payload = {
        "model": model_name,
        "prompt": prompt,
        "stream": False,
        "options": {
            "temperature": 0.15,
            "top_p": 0.9,
            "repeat_penalty": 1.05,
            "num_predict": 9500,
            "num_ctx": min(count_tokens(prompt) + 6144, 32768),
        },
        "think": False
    }

    try:
        print("=====STARTING TRANSCRIPT ANONYMIZATION=====")
        response = requests.post(f"{OLLAMA_URL}/api/generate", json=payload)
        response.raise_for_status()

        response_text = response.json().get("response", "").strip()

        if not response_text:
            return "[ERROR]: Empty response from model."
        
        print("\n======TRANSCRIPT ANONYMIZATION RESPONSE======\n")
        print(response_text)
        print("\n\n\n")
        
        print("ANON TRANSCRIPT SAVING IN PROGRESS....\n")
        safe_model = re.sub(r'[^\w.-]+', '_', model_name)
        filename = f"tests/anonymizer_tests/qwen/{safe_model}_anontranscript.txt"
        with open(filename, "w+", encoding="utf-8", newline="") as file:
         file.write(f"МОДЕЛЬ: {model_name}\n\n")
         file.write("ОТВЕТ:\n")
         file.write(response_text)
         file.write("\n")

        print("!DONE!")
        return response_text
    except Exception as e:
        return f"[ERROR]: {e}"

def transcribe_meeting():
   filepath = "new_meeting.mp3"

   print(f"Saved uploaded file to: {filepath}")
   print("STARTING TRANSCRIPTION")

   print(f"\nPyTorch version: {torch.__version__}\n")
   print(f"\nCUDA version: {torch.version.cuda}\n")
   print(f"\nCUDA available: {torch.cuda.is_available()}\n")
   print(f"\ncuDNN enabled: {torch.backends.cudnn.enabled}\n")

   device = "cuda" if torch.cuda.is_available() else "cpu"
   model = whisper.load_model("large").to(device)

   result = model.transcribe(filepath, fp16 = (device == "cuda"))

   output_filename = os.path.splitext(os.path.basename(filepath))[0]
   output_path = os.path.join("transcripts", f"{output_filename}.txt")
   with open(output_path, "w+", encoding="utf-8") as file:
      file.write(result["text"])
   
   return output_path

if __name__ == "__main__":
   filepath = "transcripts/new_meeting.txt"

   # option = int(input("Choose file option:\n 1. Командос17-12.txt \t 2. Командос23-12.txt\n"))
   # if option == 2:
   #    filepath = "transcripts/Командос23-12.txt"
   # elif option == 1:
   #    filepath = "transcripts/Командос17-12.txt"

   print(f"\nФАЙЛ ВЫБРАН: {filepath}\n")
   with open(f"{filepath}", "r", encoding="utf-8") as file:
      orginal_text = file.read()

   mapping_model_name = "qwen3:30b"

   print("\n============Starting anonymization pipeline============\n")
   anon_mapping = get_anonymization_mapping(orginal_text, mapping_model_name)

   anon_model_name = "qwen3:30b"
   anonymize_transcript(orginal_text, anon_mapping, model_name=anon_model_name)
    